generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                String             @id @default(uuid())
  email             String             @unique
  password          String
  type              user_type
  social_id         String?
  platform          String?
  is_verified       Boolean            @default(false)
  is_active         Boolean            @default(true)
  is_deleted        Boolean            @default(false)
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  is_notification   Boolean            @default(false)
  push_notification Boolean            @default(false)
  last_wakeup_email DateTime?
  authentication    authentication?
  calendarEvents    calendar_event[]
  conversations     conversation[]
  goals             goal[]
  journals          journal[]
  lifeAreas         life_area[]
  profile           profile?
  push_subscription push_subscription?
  push_tokens       push_token[]
  reminders         reminder[]
}

model authentication {
  id                String        @id @default(uuid())
  email_otp         String?
  is_email_verified Boolean       @default(false)
  verification_id   String?       @unique
  user_id           String?       @unique
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  user              user?         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  verification      verification? @relation(fields: [verification_id], references: [id], onDelete: Cascade)
}

model push_token {
  id         String   @id @default(uuid())
  user_id    String
  token      String   @unique
  platform   String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}


model verification {
  id             String          @id @default(uuid())
  email          String
  password       String
  social_id      String?
  platform       String?
  phone_number   String?
  type           user_type       @default(USER)
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  full_name      String?
  authentication authentication?
}

model profile {
  id                  String   @id @default(uuid())
  user_id             String   @unique
  profile_picture_url String?
  is_deleted          Boolean  @default(false)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  bio                 String?
  full_name           String?
  mentor_name         String?
  phone_number        String?
  user                user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model push_subscription {
  id         String   @id @default(uuid())
  user_id    String   @unique
  endpoint   String
  auth       String
  p256dh     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model conversation {
  id         String         @id @default(uuid())
  user_id    String
  title      String         @default("New Chat")
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
  messages   chat_message[]
  user       user           @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model chat_message {
  id                 String               @id @default(uuid())
  conversation_id    String
  message            String
  is_flagged         Boolean              @default(false)
  created_at         DateTime             @default(now())
  sender             message_sender
  conversation       conversation         @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  life_area_sub_goal life_area_sub_goal[]

  @@index([conversation_id])
}

model goal {
  id            String              @id @default(uuid())
  user_id       String
  title         String
  description   String?
  due_date      DateTime?
  created_at    DateTime            @default(now())
  updated_at    DateTime            @updatedAt
  is_completed  Boolean             @default(false)
  is_email_sent Boolean             @default(false)
  sub_goal_id   String?
  sub_goal      life_area_sub_goal? @relation("SubGoalGoals", fields: [sub_goal_id], references: [id])
  user          user                @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model journal {
  id            String   @id @default(uuid())
  user_id       String
  content       String
  is_auto       Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  is_completed  Boolean  @default(false)
  is_email_sent Boolean  @default(false)
  category      String?
  emoji         String?
  favorite      Boolean  @default(false)
  user          user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model reminder {
  id            String   @id @default(uuid())
  user_id       String
  message       String
  remind_at     DateTime
  is_sent       Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  is_completed  Boolean  @default(false)
  is_email_sent Boolean  @default(false)
  user          user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model calendar_event {
  id            String    @id @default(uuid())
  user_id       String
  title         String
  description   String?
  start_time    DateTime
  end_time      DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  is_completed  Boolean   @default(false)
  is_email_sent Boolean   @default(false)
  user          user      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model life_area {
  id         String               @id @default(uuid())
  user_id    String
  name       String
  created_at DateTime             @default(now())
  updated_at DateTime             @updatedAt
  color      String?
  user       user                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
  sub_goals  life_area_sub_goal[]

  @@unique([user_id, name])
}

model life_area_sub_goal {
  id              String        @id @default(uuid())
  life_area_id    String
  title           String
  is_completed    Boolean       @default(false)
  priority        Int           @default(0)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  chat_message_id String?
  description     String?
  due_date        DateTime?
  goals           goal[]        @relation("SubGoalGoals")
  chat_message    chat_message? @relation(fields: [chat_message_id], references: [id])
  life_area       life_area     @relation(fields: [life_area_id], references: [id], onDelete: Cascade)
}

enum user_type {
  USER
  ADMIN
  SUBSCRIBER
}

enum message_sender {
  USER
  BOT
}
